python manage.py createsuperuser - creates an admin account (asks for username, email, and password)

Sample of superuser/admin:
admin
admin@eisBlume.com
adminIsEisBlume

python manage.py migrate - migrates preliminary tables such as auth_user, run also this command after you run "makemigrations" command

python manage.py makemigrations - makes migration file for newly created models

To delete a migration file:
- just simply delete a migration file and run the commands "makemigrations" and "migrate" to update your database tables

Queries 
https://docs.djangoproject.com/en/5.0/ref/models/querysets
For related objects (Primary and Foreign key relationships): https://docs.djangoproject.com/en/5.0/topics/db/queries/#queryset-model-example
Example: https://docs.djangoproject.com/en/5.0/topics/db/queries/#queryset-model-example

To use the QuerySet API
For testing
- python manage.py shell - opens shell
- from [appname].models import *
 
 Template tags
 {% %} - static (loops or conditionals within the template. They do not produce any output directly but control the flow or logic of the template)
 {{}} - dynamic (They are used to output the value of a variable or an expression)

 Forms 
 Model Forms - https://docs.djangoproject.com/en/5.0/topics/forms/modelforms/
 Instead of creating a generic form, Django allows you to automatically generate forms through their Model Forms feature.
 Advantages:
 1. Automatic Form Generation
 2. Built-in Validation
 3. Integration with ORM (Directly saves form data to the database using the model's save() method)
 4. DRY Principle 
 In Laravel, we have to do the generic way of creating forms such as putting the name (table header name) and its value.
 Furthermore, we will handle the validation through Controllers.

 Disadvantage:
 1. No customization to forms. Have to use third party apps such as django-crispy-forms
 https://bugbytes.io/posts/integrating-django-crispy-forms-with-tailwindcss/

 pip install django-crispy-forms
 pip install crispy-tailwind